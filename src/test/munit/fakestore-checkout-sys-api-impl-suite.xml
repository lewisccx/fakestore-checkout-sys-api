<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="fakestore-checkout-sys-api-impl-suite.xml" />
	<munit:test name="checkout-implFlow-insertOrder" doc:id="0ccf4554-f55d-4f3e-949c-21a2c90913bd" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Check if Collection 'order' exists" doc:id="50f87459-2e74-4c29-a579-a62b000a0701" processor="mongo:collection-exists">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="75efcfe7-ef82-4602-9baf-4a4e8226c251" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://checkoutimplFlowinsertOrder\mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://checkoutimplFlowinsertOrder\mock_variable_.dwl')]" />
						<munit-tools:variable key="order" value="#[output application/json --- readUrl('classpath://checkoutimplFlowinsertOrder\mock_variable_1.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Input" doc:id="65c83455-2b4e-49c1-9fac-b35f81ae5485">
				<munit:payload value="#[output application/json --- readUrl('classpath://checkoutimplFlowinsertOrder\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://checkoutimplFlowinsertOrder\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://checkoutimplFlowinsertOrder\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to checkout-implFlow" doc:id="68d19cd4-5ecd-4c07-ba11-32b3a03886c3" name="checkout-implFlow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert that" doc:id="bc4d0922-4546-4466-b699-8fcac2fa2dc8" expression="#[payload.title]" is='#[MunitTools::equalTo("item1, item2, item3")]' />
			<munit-tools:verify-call doc:name="Verify order" doc:id="76c27d7d-7616-4eb0-985d-99f8274471f2" processor="ee:transform" times="1">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute whereValue="f810bca0-2fb5-4e1d-8352-79e252cfec89" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="checkout-implFlow-createOrderCollectionAndInsert" doc:id="651dc150-4f4e-4747-8426-e307357da49d" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Insert order object" doc:id="cb534f4a-3cae-44c4-991a-e157d4c7d5a8" processor="mongo:insert-document">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="437f5a2e-f504-4b6b-9cc5-3efcf2abf728" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://checkoutimplFlowcreateOrderCollectionAndInsert\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://checkoutimplFlowcreateOrderCollectionAndInsert\mock_variable_.dwl')]" />
						<munit-tools:variable key="order" value="#[output application/json --- readUrl('classpath://checkoutimplFlowcreateOrderCollectionAndInsert\mock_variable_1.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock Create order collection" doc:id="e59c830c-e8d8-4e36-a57e-a79517b3799e" processor="mongo:create-collection">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="d22a5497-3ef9-4146-8809-b6ee346c2571" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://checkoutimplFlowcreateOrderCollectionAndInsert\mock_payload1.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://checkoutimplFlowcreateOrderCollectionAndInsert\mock_variable_2.dwl')]" />
						<munit-tools:variable key="order" value="#[output application/json --- readUrl('classpath://checkoutimplFlowcreateOrderCollectionAndInsert\mock_variable_3.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock Check if Collection 'order' exists" doc:id="337b97d4-bf10-44ad-b65a-96395519bcb3" processor="mongo:collection-exists">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="75efcfe7-ef82-4602-9baf-4a4e8226c251" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://checkoutimplFlowcreateOrderCollectionAndInsert\mock_payload2.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://checkoutimplFlowcreateOrderCollectionAndInsert\mock_variable_4.dwl')]" />
						<munit-tools:variable key="order" value="#[output application/json --- readUrl('classpath://checkoutimplFlowcreateOrderCollectionAndInsert\mock_variable_5.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Input" doc:id="efe04686-ee3b-4703-b8c1-ae94771e6164">
				<munit:payload value="#[output application/json --- readUrl('classpath://checkoutimplFlowcreateOrderCollectionAndInsert\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://checkoutimplFlowcreateOrderCollectionAndInsert\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://checkoutimplFlowcreateOrderCollectionAndInsert\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to checkout-implFlow" doc:id="edb0888b-debc-40bf-8851-9208a7e131ca" name="checkout-implFlow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert that" doc:id="7305507d-8a9e-4909-8937-2a262e8e8a30" expression="#[payload.title]" is='#[MunitTools::equalTo("item1, item2, item3")]' />
			<munit-tools:verify-call doc:name="Verify order" doc:id="b0ceb1fe-f5b6-40d6-95a1-258be367a67b" processor="ee:transform" times="1">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute whereValue="f810bca0-2fb5-4e1d-8352-79e252cfec89" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="checkout-implFlow-mongoTimeout" doc:id="9bfbd1ac-07ed-40cf-a974-41e4c80e6426" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Check if Collection 'order' exists" doc:id="cd194fb9-4750-43d5-bd60-109f565c83cf" processor="mongo:collection-exists">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="75efcfe7-ef82-4602-9baf-4a4e8226c251" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://checkoutimplFlowinsertOrder\mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:error typeId="MONGO:TIMEOUT" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://checkoutimplFlowinsertOrder\mock_variable_.dwl')]" />
						<munit-tools:variable key="order" value="#[output application/json --- readUrl('classpath://checkoutimplFlowinsertOrder\mock_variable_1.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			
</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Input" doc:id="02af7042-4a30-4589-8843-f94d3b87d12b">
				<munit:payload value="#[output application/json --- readUrl('classpath://checkoutimplFlowinsertOrder\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://checkoutimplFlowinsertOrder\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://checkoutimplFlowinsertOrder\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
			<try doc:name="Try" doc:id="c2be1b7a-4acd-4595-a654-40c6a354fd54" >
				<flow-ref doc:name="Flow-ref to checkout-implFlow" doc:id="447aede4-ca77-4582-9200-a06b5218edf4" name="checkout-implFlow" />
				<error-handler >
					<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="bb5a8d32-dea5-4273-ad00-9ef01b7e10f2" >
						<logger level="INFO" doc:name="Continue to validation" doc:id="14347ad5-5831-45e0-bdd2-29404cd1adf7" message="#[payload]"/>
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation >
			<logger level="INFO" doc:name="Logger" doc:id="f2d21eb5-59ff-4323-aa95-0caa03a9464f" message="#[payload]"/>
			<munit-tools:assert-equals doc:name="Assert equals" doc:id="9b29e71c-d05e-4ec7-b16f-1cff5e161ce4" actual="#[payload.error.status]" expected='#["TIMEOUT"]' message="payload.error.status should be timeout"/>
			<logger level="INFO" doc:name="Logger" doc:id="a700e0ed-8f99-4546-9dbb-df2fbd01995f" message="#[payload]"/>
		
</munit:validation>
	</munit:test>
	<munit:test name="fakestore-checkout-sys-api-impl-triggerNotImplementedSuccess" doc:id="271ad0ed-1390-4748-ba02-3a93e3cc2fb4" expectedErrorType="APIKIT:NOT_IMPLEMENTED">
			<munit:behavior>
				<munit-tools:mock-when doc:name="Mock when APIKIT:NOT_IMPLEMENTED" doc:id="07d312fd-ec17-4c8d-9b26-efa8619317fa" processor="apikit:router">
					<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="fakestore-checkout-sapi-config" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
						<munit-tools:error typeId="APIKIT:NOT_IMPLEMENTED" />
					</munit-tools:then-return>
				</munit-tools:mock-when>
			</munit:behavior>
			<munit:execution>
				<flow-ref doc:name="Flow Reference to fakestore-checkout-sapi-main" doc:id="fe356268-5b8b-487f-b692-4ca505ba6156" name="fakestore-checkout-sapi-main" />
			</munit:execution>
			<munit:validation>
				<munit-tools:assert-equals doc:name="Assert equals" doc:id="466df359-07b3-4021-9230-dd7acebe9ed4" actual="#[vars.httpStatus]" expected="#[501]" />
			</munit:validation>
		</munit:test>
	<munit:test name="fakestore-checkout-sys-api-impl-triggerBadRequestSuccess" doc:id="a9c82cd6-7183-49e6-ba3f-3dac8da29d3a" expectedErrorType="APIKIT:BAD_REQUEST">
			<munit:behavior>
				<munit-tools:mock-when doc:name="Mock when APIKIT:BAD_REQUEST" doc:id="7bb346b9-4152-415b-9df5-67aeb888ec71" processor="apikit:router">
					<munit-tools:with-attributes>
						<munit-tools:with-attribute whereValue="fakestore-checkout-sapi-config" attributeName="config-ref" />
					</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="APIKIT:BAD_REQUEST" />
				</munit-tools:then-return>
				</munit-tools:mock-when>
			</munit:behavior>
			<munit:execution>
				<flow-ref doc:name="Flow Reference to fakestore-checkout-sapi-main" doc:id="16ff0953-476f-41c4-a93d-87ff705df6da" name="fakestore-checkout-sapi-main" />
			</munit:execution>
			<munit:validation>
				<munit-tools:assert-equals doc:name="Assert equals" doc:id="f58c4e11-72ff-4619-9757-f61965f2c4d9" actual="#[vars.httpStatus]" expected="#[400]" />
			</munit:validation>
		</munit:test>
	<munit:test name="fakestore-checkout-sys-api-impl-triggerNotFoundSuccess" doc:id="2d62c50a-9e8e-418b-8fbe-62c74155f1b0" expectedErrorType="APIKIT:NOT_FOUND">
			<munit:behavior>
				<munit-tools:mock-when doc:name="Mock when APIKIT:BAD_REQUEST" doc:id="ef614d50-2e74-4bdd-b876-01b7c1b5fc06" processor="apikit:router">
					<munit-tools:with-attributes>
						<munit-tools:with-attribute whereValue="fakestore-checkout-sapi-config" attributeName="config-ref" />
					</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="APIKIT:NOT_FOUND" />
				</munit-tools:then-return>
				</munit-tools:mock-when>
			</munit:behavior>
			<munit:execution>
				<flow-ref doc:name="Flow Reference to fakestore-checkout-sapi-main" doc:id="bda97f1e-a62d-43ae-b2e6-00b3780ad47c" name="fakestore-checkout-sapi-main" />
			</munit:execution>
			<munit:validation>
				<munit-tools:assert-equals doc:name="Assert equals" doc:id="70025c88-e7cb-4bb1-b472-47a65dd24143" actual="#[vars.httpStatus]" expected="#[404]" />
			</munit:validation>
		</munit:test>
	<munit:test name="fakestore-checkout-sys-api-impl-triggerNotAcceptableSuccess" doc:id="83496216-5015-440a-9396-1102af39f5b0" expectedErrorType="APIKIT:NOT_ACCEPTABLE">
			<munit:behavior>
				<munit-tools:mock-when doc:name="Mock when APIKIT:NOT_ACCEPTABLE" doc:id="cbba45fe-2f91-4184-a60e-87edb9167a25" processor="apikit:router">
					<munit-tools:with-attributes>
						<munit-tools:with-attribute whereValue="fakestore-checkout-sapi-config" attributeName="config-ref" />
					</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId=" APIKIT:NOT_ACCEPTABLE" />
				</munit-tools:then-return>
				</munit-tools:mock-when>
			</munit:behavior>
			<munit:execution>
				<flow-ref doc:name="Flow Reference to fakestore-checkout-sapi-main" doc:id="aca7c4cc-bc93-4640-a58e-72aaeefea3fc" name="fakestore-checkout-sapi-main" />
			</munit:execution>
			<munit:validation>
				<munit-tools:assert-equals doc:name="Assert equals" doc:id="6f433de0-06a9-4a52-b9f0-aca7278f564f" actual="#[vars.httpStatus]" expected="#[406]" />
			</munit:validation>
		</munit:test>
	<munit:test name="fakestore-checkout-sys-api-impl-triggerUnsupportedMediaTypeSuccess" doc:id="ac04c850-6f38-4619-9ed4-d515e486a04b" expectedErrorType="APIKIT:UNSUPPORTED_MEDIA_TYPE">
			<munit:behavior>
				<munit-tools:mock-when doc:name="Mock when APIKIT:UNSUPPORTED_MEDIA_TYPE" doc:id="55543eac-6f8d-4e43-b61e-61c5196a7998" processor="apikit:router">
					<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="fakestore-checkout-sapi-config" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
						<munit-tools:error typeId="APIKIT:UNSUPPORTED_MEDIA_TYPE" />
					</munit-tools:then-return>
				</munit-tools:mock-when>
			</munit:behavior>
			<munit:execution>
				<flow-ref doc:name="Flow Reference to fakestore-checkout-sapi-main" doc:id="9873ea09-49b5-403d-8bc4-92b835884244" name="fakestore-checkout-sapi-main" />
			</munit:execution>
			<munit:validation>
				<munit-tools:assert-equals doc:name="Assert equals" doc:id="aa8138d4-bfab-4953-87ca-f7ba16886e07" actual="#[vars.httpStatus]" expected="#[415]" />
			</munit:validation>
		</munit:test>
	<munit:test name="fakestore-checkout-sys-api-impl-triggerHttpTimeoutSuccess" doc:id="a5642c8d-ac8d-4e20-948d-58eda3cf7ae8" expectedErrorType="HTTP:TIMEOUT">
			<munit:behavior>
				<munit-tools:mock-when doc:name="Mock when HTTP:TIMEOUT" doc:id="5e8fcac6-76aa-4591-a1ab-d9ea66e9ad13" processor="mongo:collection-exists">
					<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="MongoDB_Config" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
						<munit-tools:error typeId="HTTP:TIMEOUT" />
					</munit-tools:then-return>
				</munit-tools:mock-when>
			</munit:behavior>
			<munit:execution>
				<flow-ref doc:name="Flow Reference to checkout-implFlow" doc:id="4b12d053-888b-443f-8016-69265be860ae" name="checkout-implFlow" />
			</munit:execution>
			<munit:validation>
				<munit-tools:assert-equals doc:name="Assert equals" doc:id="b6afbf25-3072-47d6-a31b-a3c3f07e4636" actual="#[vars.httpStatus]" expected="#[500]" />
			</munit:validation>
		</munit:test>
	<munit:test name="fakestore-checkout-sys-api-impl-triggerNotFoundinConsoleSuccess" doc:id="491d9a13-a203-46be-ae70-5f02b3c7f8c3" expectedErrorType="APIKIT:NOT_FOUND">
			<munit:behavior>
				<munit-tools:mock-when doc:name="Mock when APIKIT:NOT_FOUND" doc:id="0fc2d698-6f7d-498e-8ad8-62ed27ab53f5" processor="apikit:console">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="fakestore-checkout-sapi-config" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
						<munit-tools:error typeId="APIKIT:NOT_FOUND" />
					</munit-tools:then-return>
				</munit-tools:mock-when>
			</munit:behavior>
			<munit:execution>
				<flow-ref doc:name="Flow Reference to fakestore-checkout-sapi-console" doc:id="c96a25cb-c740-4e21-98bc-e39cda7e46da" name="fakestore-checkout-sapi-console" />
			</munit:execution>
			<munit:validation>
				<munit-tools:assert-equals doc:name="Assert equals" doc:id="edc3053a-fce9-47ae-89ee-360564bcf016" actual="#[vars.httpStatus]" expected="#[404]" />
			</munit:validation>
		</munit:test>
	<munit:test name="fakestore-checkout-sys-api-impl-triggerAnyErrorSuccess" doc:id="89e1ee4b-41e4-41a4-aef7-4181b142e062" expectedErrorType="ANY">
			<munit:behavior>
				<munit-tools:mock-when doc:name="Mock when ANY" doc:id="b25d4516-3889-4a53-86ee-651d87f6ebc8" processor="mongo:collection-exists">
					<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="MongoDB_Config" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
						<munit-tools:error typeId="ANY" />
					</munit-tools:then-return>
				</munit-tools:mock-when>
			</munit:behavior>
			<munit:execution>
				<flow-ref doc:name="Flow Reference to getAllProducts-implFlow" doc:id="536f8349-2126-4db9-b511-d13c6ed07436" name="checkout-implFlow" />
			</munit:execution>
			<munit:validation>
				<munit-tools:assert-equals doc:name="Assert equals" doc:id="c9ff6984-e0d8-4831-8dc0-899559737601" actual="#[error.errorType.identifier]" expected='#["ANY"]' />
			</munit:validation>
		</munit:test>
	<munit:test name="fakestore-checkout-sys-api-impl-triggerMethodNotAllowedSuccess" doc:id="a068fa2c-9378-420f-bb36-bb6944684bf6" expectedErrorType="APIKIT:METHOD_NOT_ALLOWED">
			<munit:behavior>
				<munit-tools:mock-when doc:name="Mock when APIKIT:METHOD_NOT_ALLOWED" doc:id="d5d82fa8-2058-4648-8393-4ada50efbf30" processor="apikit:router">
					<munit-tools:with-attributes>
						<munit-tools:with-attribute whereValue="fakestore-checkout-sapi-config" attributeName="config-ref" />
					</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:error typeId="APIKIT:METHOD_NOT_ALLOWED" />
				</munit-tools:then-return>
				</munit-tools:mock-when>
			</munit:behavior>
			<munit:execution>
				<flow-ref doc:name="Flow Reference to fakestore-checkout-sapi-main" doc:id="da5ac6f7-4fe3-4ee0-ae31-37417e598fed" name="fakestore-checkout-sapi-main" />
			</munit:execution>
			<munit:validation>
				<munit-tools:assert-equals doc:name="Assert equals" doc:id="2af33753-4277-48eb-adc1-99ef86900804" actual="#[vars.httpStatus]" expected="#[405]" />
			</munit:validation>
		</munit:test>
	<munit:test name="post:\checkout:application\json:fakestore-checkout-sapi-config-success" doc:id="3a1ab10d-e94c-42bb-b0a5-f8dc28a22baf">
			<munit:behavior>
				<munit-tools:mock-when doc:name="Mock checkout" doc:id="213c9fc3-1243-41c7-9631-27a4adcb83bb" processor="flow-ref">
					<munit-tools:with-attributes>
						<munit-tools:with-attribute whereValue="afb0458d-943e-40ea-8601-97e30e84aa89" attributeName="doc:id" />
					</munit-tools:with-attributes>
					<munit-tools:then-return>
						<munit-tools:payload value="#[output application/json --- readUrl('classpath://postcheckoutapplicationjsonfakestorecheckoutsapiconfigsuccess\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variables>
							<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://postcheckoutapplicationjsonfakestorecheckoutsapiconfigsuccess\mock_variable_.dwl')]" />
							<munit-tools:variable key="order" value="#[output application/json --- readUrl('classpath://postcheckoutapplicationjsonfakestorecheckoutsapiconfigsuccess\mock_variable_1.dwl')]" mediaType="application/json" encoding="UTF-8" />
						</munit-tools:variables>
					</munit-tools:then-return>
				</munit-tools:mock-when>
			</munit:behavior>
			<munit:execution>
				<munit:set-event doc:name="Set Input" doc:id="7258d20d-6864-495c-9dd0-12cf925618a7">
					<munit:payload value="#[output application/json --- readUrl('classpath://postcheckoutapplicationjsonfakestorecheckoutsapiconfigsuccess\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
					<munit:attributes value="#[readUrl('classpath://postcheckoutapplicationjsonfakestorecheckoutsapiconfigsuccess\set-event_attributes.dwl')]" />
					<munit:variables>
						<munit:variable key="outboundHeaders" value="#[readUrl('classpath://postcheckoutapplicationjsonfakestorecheckoutsapiconfigsuccess\set-event_variable_.dwl')]" />
					</munit:variables>
				</munit:set-event>
			<flow-ref doc:name="Flow-ref to post:\checkout:application\json:fakestore-checkout-sapi-config" doc:id="3e34f1e6-2a4a-4457-b39f-e4417c01e840" name="post:\checkout:application\json:fakestore-checkout-sapi-config" />
			</munit:execution>
			<munit:validation>
				<munit-tools:assert-equals doc:name="Assert equals" doc:id="5b97b3d0-815f-4a60-a519-95cc42fbe14e" actual="#[payload.title]" expected='#["item1, item2, item3"]' message='The payload title should be "item1, item2, item3"' />
			</munit:validation>
		</munit:test>

</mule>
