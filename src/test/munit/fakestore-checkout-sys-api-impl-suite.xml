<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="fakestore-checkout-sys-api-impl-suite.xml" />
	<munit:test name="checkout-implFlow-insertOrder" doc:id="0ccf4554-f55d-4f3e-949c-21a2c90913bd" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Check if Collection 'order' exists" doc:id="50f87459-2e74-4c29-a579-a62b000a0701" processor="mongo:collection-exists">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="75efcfe7-ef82-4602-9baf-4a4e8226c251" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://checkoutimplFlowinsertOrder\mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://checkoutimplFlowinsertOrder\mock_variable_.dwl')]" />
						<munit-tools:variable key="order" value="#[output application/json --- readUrl('classpath://checkoutimplFlowinsertOrder\mock_variable_1.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="65c83455-2b4e-49c1-9fac-b35f81ae5485" >
				<munit:payload value="#[output application/json --- readUrl('classpath://checkoutimplFlowinsertOrder\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://checkoutimplFlowinsertOrder\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://checkoutimplFlowinsertOrder\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to checkout-implFlow" doc:id="68d19cd4-5ecd-4c07-ba11-32b3a03886c3" name="checkout-implFlow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:verify-call doc:name="Verify order" doc:id="76c27d7d-7616-4eb0-985d-99f8274471f2" processor="ee:transform" times="1">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute whereValue="f810bca0-2fb5-4e1d-8352-79e252cfec89" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
			<munit-tools:assert-that doc:name="Assert that" doc:id="bc4d0922-4546-4466-b699-8fcac2fa2dc8" expression="#[payload.title]" is='#[MunitTools::equalTo("item1, item2, item3")]'/>
		</munit:validation>
	</munit:test>
	<munit:test name="checkout-implFlow-createOrderCollectionAndInsert" doc:id="651dc150-4f4e-4747-8426-e307357da49d" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Insert order object" doc:id="cb534f4a-3cae-44c4-991a-e157d4c7d5a8" processor="mongo:insert-document">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="437f5a2e-f504-4b6b-9cc5-3efcf2abf728" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://checkoutimplFlowcreateOrderCollectionAndInsert\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://checkoutimplFlowcreateOrderCollectionAndInsert\mock_variable_.dwl')]" />
						<munit-tools:variable key="order" value="#[output application/json --- readUrl('classpath://checkoutimplFlowcreateOrderCollectionAndInsert\mock_variable_1.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock Create order collection" doc:id="e59c830c-e8d8-4e36-a57e-a79517b3799e" processor="mongo:create-collection">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="d22a5497-3ef9-4146-8809-b6ee346c2571" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://checkoutimplFlowcreateOrderCollectionAndInsert\mock_payload1.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://checkoutimplFlowcreateOrderCollectionAndInsert\mock_variable_2.dwl')]" />
						<munit-tools:variable key="order" value="#[output application/json --- readUrl('classpath://checkoutimplFlowcreateOrderCollectionAndInsert\mock_variable_3.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock Check if Collection 'order' exists" doc:id="337b97d4-bf10-44ad-b65a-96395519bcb3" processor="mongo:collection-exists">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="75efcfe7-ef82-4602-9baf-4a4e8226c251" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://checkoutimplFlowcreateOrderCollectionAndInsert\mock_payload2.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://checkoutimplFlowcreateOrderCollectionAndInsert\mock_variable_4.dwl')]" />
						<munit-tools:variable key="order" value="#[output application/json --- readUrl('classpath://checkoutimplFlowcreateOrderCollectionAndInsert\mock_variable_5.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="efe04686-ee3b-4703-b8c1-ae94771e6164" >
				<munit:payload value="#[output application/json --- readUrl('classpath://checkoutimplFlowcreateOrderCollectionAndInsert\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://checkoutimplFlowcreateOrderCollectionAndInsert\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://checkoutimplFlowcreateOrderCollectionAndInsert\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to checkout-implFlow" doc:id="edb0888b-debc-40bf-8851-9208a7e131ca" name="checkout-implFlow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:verify-call doc:name="Verify order" doc:id="b0ceb1fe-f5b6-40d6-95a1-258be367a67b" processor="ee:transform" times="1">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute whereValue="f810bca0-2fb5-4e1d-8352-79e252cfec89" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
			<munit-tools:assert-that doc:name="Assert that" doc:id="7305507d-8a9e-4909-8937-2a262e8e8a30" expression="#[payload.title]" is='#[MunitTools::equalTo("item1, item2, item3")]'/>
		</munit:validation>
	</munit:test>
	<munit:test name="checkout-implFlow-mongoTimeout" doc:id="9bfbd1ac-07ed-40cf-a974-41e4c80e6426" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Check if Collection 'order' exists" doc:id="cd194fb9-4750-43d5-bd60-109f565c83cf" processor="mongo:collection-exists">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="75efcfe7-ef82-4602-9baf-4a4e8226c251" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://checkoutimplFlowinsertOrder\mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:error typeId="MONGO:TIMEOUT" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://checkoutimplFlowinsertOrder\mock_variable_.dwl')]" />
						<munit-tools:variable key="order" value="#[output application/json --- readUrl('classpath://checkoutimplFlowinsertOrder\mock_variable_1.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			
</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="02af7042-4a30-4589-8843-f94d3b87d12b" >
				<munit:payload value="#[output application/json --- readUrl('classpath://checkoutimplFlowinsertOrder\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://checkoutimplFlowinsertOrder\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://checkoutimplFlowinsertOrder\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<try doc:name="Try" doc:id="c2be1b7a-4acd-4595-a654-40c6a354fd54" >
				<flow-ref doc:name="Flow-ref to checkout-implFlow" doc:id="447aede4-ca77-4582-9200-a06b5218edf4" name="checkout-implFlow" />
				<error-handler >
					<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="bb5a8d32-dea5-4273-ad00-9ef01b7e10f2" >
						<logger level="INFO" doc:name="Continue to validation" doc:id="14347ad5-5831-45e0-bdd2-29404cd1adf7" message="#[payload]"/>
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation >
			<logger level="INFO" doc:name="Logger" doc:id="f2d21eb5-59ff-4323-aa95-0caa03a9464f" message="#[payload]"/>
			<munit-tools:assert-equals doc:name="Assert equals" doc:id="9b29e71c-d05e-4ec7-b16f-1cff5e161ce4" actual="#[payload.error.status]" expected='#["TIMEOUT"]' message="payload.error.status should be timeout"/>
		
</munit:validation>
	</munit:test>

</mule>
